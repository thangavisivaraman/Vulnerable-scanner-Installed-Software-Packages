import socket
import threading
import subprocess

def get_package_data():
    # Replace this command with the appropriate one for your system
    result = subprocess.run(['dpkg', '-l'], stdout=subprocess.PIPE)
    package_data = result.stdout.decode('utf-8')
    return package_data

def handle_client_connection(client_socket):
    try:
        while True:
            request = client_socket.recv(1024)
            if not request:
                break
            if request.decode() == 'fetch_packages':
                package_data = get_package_data()
                with open('package_list.txt', 'w') as f:
                    f.write(package_data)
                
                with open('package_list.txt', 'rb') as f:
                    while (chunk := f.read(1024)):
                        client_socket.sendall(chunk)
                break  # Exit after sending the file
    except ConnectionResetError:
        print("Connection reset by peer")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        client_socket.close()

def main():
    server_ip = '0.0.0.0'  # Listen on all interfaces
    server_port = 5000
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((server_ip, server_port))
        server_socket.listen(5)
        print("Server listening on port", server_port)
        
        while True:
            client_socket, addr = server_socket.accept()
            print(f"Accepted connection from {addr}")
            threading.Thread(target=handle_client_connection, args=(client_socket,)).start()

if __name__ == "__main__":
    main()
